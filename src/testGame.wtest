import jefe.*
import jugador.*
import oficina.*
import direcciones.*
import wollok.game.*
import pantallaJuego.*
import configuraciones.*
import objetivos.*
import sonidos.*
import tarjetas.*
import menuInicio.*
import niveles.*

describe "Jugador en la primera fase"{
	const tareasNecesarias = #{tareaAzul, tareaRojo, tareaVerde}
	
	fixture {
		game.clear()
		sonido.escapeBoss(mockGame)
		jefe1.elegirDificultad(facil)
		jefe2.elegirDificultad(facil)
		pantallaJuego.avanzarNivel(nivel1)
	}

	test"El jugador pierde energia al moverse"{
		jugador.moverse(arriba)
		jugador.moverse(derecha)
		assert.equals(96,jugador.energia())
	}
	
	test "El jugador interactua con un consumible" {
		jugador.disminuirEnergia(30)
		cafeConLeche.interactuar()
		assert.equals(95,jugador.energia())
	}

	test"El jugador obtiene una copia"{
		assert.that(impresoraAzul.puedeImprimir())
		impresoraAzul.interactuar()
		assert.equals(tareaAzul, jugador.tareaEnMano())
	}

	test"El jugador no puede volver a tomar la misma tarea"{
		assert.that(impresoraVerde.puedeImprimir())
		impresoraVerde.interactuar()
		assert.equals(tareaVerde, jugador.tareaEnMano())
		jugador.terminarTarea(tareaVerde)
		assert.notThat(impresoraVerde.puedeImprimir())
	}

	test"El jugador le entrega la tarea al compañero"{
		impresoraAzul.interactuar()
		companieriAzul.interactuar()
		assert.that(companieriAzul.tareaEntregada())
	}

	test"El jugador entrega una tarea equivocada al compañero"{
		impresoraVerde.interactuar()
		companieriRojo.interactuar()
		assert.notThat(companieriRojo.tareaEntregada())
	}

	test"El jugador puede pasar de nivel si tiene todas las tareas realizadas"{
		jugador.terminarTarea(tareaAzul)
		jugador.terminarTarea(tareaRojo)
		jugador.terminarTarea(tareaVerde)	
		assert.equals(tareasNecesarias, jugador.tareasRealizadas())
		ascensor2.avanzar()
		assert.that(nivel1.nivelPasado())
	}

	test"El jugador no puede pasar de nivel si no tiene todas las tareas realizadas"{
		jugador.terminarTarea(tareaAzul)
		ascensor2.avanzar()
		assert.notThat(nivel1.nivelPasado())
	}
}




describe "Jugador en la segunda fase"{
	const companierisAyudados = #{companieriRojo, companieriAzul, companieriVerde}
	
	
	fixture {
		sonido.escapeBoss(mockGame)
		jefe1.elegirDificultad(facil)
		jefe2.elegirDificultad(facil)
		pantallaJuego.avanzarNivel(nivel2)
		companieriRojo.producto(helado)
		companieriVerde.producto(cafe)
		companieriAzul.producto(helado)
	}
	test"El jugador agarra un cafe de la maquina"{
		maquinaCafe.interactuar()
		assert.equals(cafe, jugador.objetoEnMano())
	}
	
	test"El jugador agarra el helado de la heladera"{
		heladera.interactuar()
		assert.equals(helado, jugador.objetoEnMano())
	}
	
	test"El jugador le entrega el café a la compañera Verde"{
		maquinaCafe.interactuar()
		companieriVerde.interactuar()
		companieriVerde.interactuar()
		assert.equals(vacio, jugador.objetoEnMano())
		assert.that(companieriVerde.objetoEntregado())
		assert.that(companieriVerde.objetoEntregado())
	}
	
	test"El jugador le entrega un helado a la compañera Verde"{
		heladera.interactuar()
		companieriAzul.interactuar()
		assert.equals(vacio,jugador.objetoEnMano())
		assert.that(companieriAzul.objetoEntregado())
	}
	
	test"El jugador no puede entregarle café a un compañero que quiere helado"{
		maquinaCafe.interactuar()
		companieriRojo.interactuar()
		assert.notThat(companieriRojo.tareaEntregada())
	}
	
	test"El jugador puede pasar de nivel si ayudo a todos sus companieris"{
		heladera.interactuar()
		companieriRojo.interactuar()
		heladera.interactuar()
		companieriAzul.interactuar()
		maquinaCafe.interactuar()
		companieriVerde.interactuar()	
		assert.equals(companierisAyudados, jugador.companierisAyudados())
		ascensor1.avanzar()
		assert.that(nivel2.nivelPasado())
	}

	test"El jugador no puede pasar de nivel si no ayudo a todos sus companieris"{
		maquinaCafe.interactuar()
		companieriVerde.interactuar()
		ascensor1.avanzar()
		assert.notThat(nivel2.nivelPasado())
	}
}

describe"Jugador en la tercera fase"{
	const objetosNecesarios = #{llaves, laptop, credencial, celular, auriculares, billetera}
	
	fixture{
		sonido.escapeBoss(mockGame)
		jefe1.elegirDificultad(facil)
		jefe2.elegirDificultad(facil)
		pantallaJuego.avanzarNivel(nivel3)
	}
	
	test"El jugador agarra la mochila"{
		mochila.interactuar()
		assert.that(jugador.tieneMochila())
	}
	
	test"El jugador sin la mochila,no puede agarrar un objeto"{
		celular.interactuar()
		assert.notThat(celular.guardado())
	}
	
	test"El jugador con la mochila,puede agarrar un objeto"{
		mochila.interactuar()
		billetera.interactuar()
		assert.that(billetera.guardado())
	}
	
	test "El jugador puede terminar el juego si consiguio guardar todos sus objetos personales" {
		mochila.interactuar()
		billetera.interactuar()
		celular.interactuar()
		llaves.interactuar()
		credencial.interactuar()
		laptop.interactuar()
		auriculares.interactuar()
		assert.equals(objetosNecesarios, jugador.objetosEnMochila())
		puerta.avanzar()
		assert.that(nivel3.nivelPasado())	
	}
	
	test "El jugador no puede terminar el juego si no consiguio guardar todos sus objetos personales" {
		mochila.interactuar()
		billetera.interactuar()
		celular.interactuar()
		laptop.interactuar()
		puerta.avanzar()
		assert.notThat(nivel3.nivelPasado())
	}
}


describe "Tarjetas del juego" {
	const impresoras = [impresoraAzul, impresoraRojo, impresoraVerde]
	const posImpresoras = impresoras.map({impresora => impresora.position()})
	const companieris = [companieriAzul, companieriRojo, companieriVerde]
	const posCompanieris = companieris.map({companieri => companieri.position()})
	
	const maquinas = [maquinaCafe, heladera]
	const posMaquinas = maquinas.map({maquina => maquina.position()})
	const objetos = [billetera, credencial, llaves, laptop, auriculares, celular]
	const posObjetos = objetos.map({objeto => objeto.position()})
	
	fixture {
		sonido.escapeBoss(mockGame)
		game.addVisual(companieriAzul)
		game.addVisual(companieriVerde)
		companieriAzul.producto(helado)
		companieriVerde.producto(cafe)
		game.addVisual(jugador)
		game.addVisual(mochila)
		game.addVisual(llaves)
		game.addVisual(billetera)
		game.addVisual(celular)
		game.addVisual(credencial)
	}
	
	test "El jefe1 reaparece en una impresora" {
		jefeAUnaImpresora.producirEfecto()
		assert.that(posImpresoras.contains(jefe1.position()))
	}
	
	test "El jefe 2 reaparece en el cubiculo de un companieri" {
		jefe2ACompanieri.producirEfecto()
		assert.that(posCompanieris.contains(jefe2.position()))
	}
	
	test "El jugador recibe un bonus de energia" {
		jugador.energia(70)
		agregarEnergia.producirEfecto()
		assert.equals(85, jugador.energia())
	}
	
	test "El jugador restaura por completo su energia" {
		jugador.energia(20)
		restaurarEnergia.producirEfecto()
		assert.equals(100, jugador.energia())
	}
	
	test "El jugador pierde un porcentaje de su energia" {
		jugador.energia(60)
		perderEnergia.producirEfecto()
		assert.equals(51, jugador.energia())
	}
	
	test "El jugador pierde una de las tareas hechas" {
		jugador.terminarTarea(tareaAzul)
		jugador.terminarTarea(tareaRojo)
		jugador.terminarTarea(tareaVerde)	
		assert.equals(3, jugador.tareasRealizadas().size())
		perderTarea.producirEfecto()
		assert.equals(2, jugador.tareasRealizadas().size())
	}
	
	test "El jugador vuelve a su posición inicial" {
		jugador.position(game.at(5,3))
		volverAlInicio.producirEfecto()
		assert.equals(game.at(3,1), jugador.position())
	}
	
	test "El jugador pierde un pedido que había entregado" {
		heladera.interactuar()
		companieriAzul.interactuar()
		maquinaCafe.interactuar()
		companieriVerde.interactuar()
		assert.equals(2, jugador.companierisAyudados().size())
		perderPedido.producirEfecto()
		assert.equals(1, jugador.companierisAyudados().size())
	}
	
	test "El jugador pierde un objeto de la mochila" {
		mochila.interactuar()
		billetera.interactuar()
		celular.interactuar()
		credencial.interactuar()
		llaves.interactuar()
		assert.equals(4, jugador.objetosEnMochila().size())
		perderObjeto.producirEfecto()
		assert.equals(3, jugador.objetosEnMochila().size())
	}
	
	test "El jefe reaparece en una de las máquinas" {
		jefeAMaquina.producirEfecto()
		assert.that(posMaquinas.contains(jefe2.position()))
	}
	
	test "El jefe reaparece en uno de los objetos" {
		jefe1AObjeto.producirEfecto()
		assert.that(posObjetos.contains(jefe1.position()))
	}
	
}
